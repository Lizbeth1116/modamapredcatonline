# -*- coding: utf-8 -*-
"""Copia de PREDICCION.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fXqbWXt2UhDF6iKEZ_8no6GRUaFNMEim

#### Install yfinance

aqui empieza el otro modelo

"""

import yfinance as yf
import pandas as pd
import numpy as np
import datetime

from fbprophet import Prophet

import matplotlib.pyplot as plt

import json 
from django.http import HttpResponse

def prediccionLineal(request):
    # berkshire hathaway inc. (b stock)
    empresa=request.GET["empresa"]
    ahora = datetime.datetime.utcnow()
    start = ahora - datetime.timedelta(days=1800)
    end = ahora - datetime.timedelta(days=1)
    
    brk = yf.Ticker(empresa)
    hist = brk.history(start="2015-01-01", end="2022-04-30", auto_adjust=True)
    hist2 = brk.history(period='max', auto_adjust=True)



    df = pd.DataFrame()

    df['ds'] = hist.index
    df['y'] = hist['Close'].values

    ##Dataframe de prediccion

    df2 = pd.DataFrame()

    df2['ds'] = hist2.index
    df2['y'] = hist2['Close'].values



    m = Prophet(daily_seasonality=False)

    m.fit(df)

    future = m.make_future_dataframe(500, freq='D')

    forecast = m.predict(future)


    df2.ds= pd.to_datetime(df2.ds)
    ff=forecast[forecast.ds>'2022-01-02']
    ff2=ff[ff.ds<'2022-05-09']
    ff3=ff[['ds','yhat','yhat_lower','yhat_upper']]

    ff4=ff3[['ds','yhat']]
    #fechas similares a la grafica de regresion lineal de PREDICCION

    ff4= ff4[ff4['ds'] >='2022-05-15']
    ff4= ff4[ff4['ds'] <='2023-01-20']

    ff4["diferencia"]=ff4.yhat.diff()

    dfPRpos = ff4[ff4['diferencia'] >0 ]
    dfPRpos["diferencia"]=dfPRpos.yhat.diff()
    dfPRpos = dfPRpos[dfPRpos['diferencia'] >0 ]
    dfPRpos
    print(dfPRpos)

    #suavizando con suavidad
    plt.figure(figsize=(15, 7.5))
    plt.plot(dfPRpos['ds'],dfPRpos['yhat'])

    lista1=list()
    """
    df['Adj Close'].tail(1500)
    for i in dfreg.index:
        if not np.isnan( dfreg["Adj Close"][i] ) :
            lista1.append({"fecha":""+i.strftime("%m/%d/%Y"),"y":dfreg["Adj Close"][i]})
        


  

    dfreg['Pronostico'].tail(1500).plot( figsize=(15, 5))
    """
    
    for i in dfPRpos.index:
        if not np.isnan( dfPRpos["yhat"][i] ) :
            lista1.append({"fecha":dfPRpos["ds"][i].strftime("%m/%d/%Y"),"y":dfPRpos["yhat"][i]})
        
    dump = json.dumps(lista1)
    return HttpResponse(dump, content_type='application/json')

